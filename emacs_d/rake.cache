#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("/Users/jon/projects/mau/" ("about                              # List versions of all Rails frameworks and the environment" "admin:remove_orphaned_art          # remove orphaned art pieces" "app:template                       # Applies the template supplied by LOCATION=(/path/to/template) or URL" "app:templates:copy                 # " "app:update                         # Update configs and some other initially generated files (or use just update:configs or update:bin)" "app:update:bin                     # " "app:update:configs                 # " "app:update:upgrade_guide_info      # " "assets:clean[keep]                 # Remove old compiled assets" "assets:clobber                     # Remove compiled assets" "assets:environment                 # Load asset compile environment" "assets:precompile                  # Compile all the assets named in config.assets.precompile" "auth:gen:site_key                  # Generates config/initializers/site_keys.rb" "autoprefixer:info                  # Show selected browsers and prefixed CSS properties and values" "cache:clear                        # Clear memcache" "cache_digests:dependencies         # Lookup first-level dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "cache_digests:nested_dependencies  # Lookup nested dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "clean                              # Remove any temporary products" "clobber                            # Remove any generated files" "cucumber                           # Alias for cucumber:ok" "cucumber:all                       # Run all features" "cucumber:ok                        # Run features that should pass" "cucumber:rerun                     # Record failing features and run only them if any exist" "cucumber:statsetup                 # " "cucumber:wip                       # Run features that are being worked on" "db:_dump                           # " "db:abort_if_pending_migrations     # " "db:charset                         # " "db:check_protected_environments    # " "db:collation                       # " "db:create                          # Creates the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:create:all to create all databases in the config). Without RAILS_ENV or when RAILS_ENV is development, it defaults to creating the development and test databases" "db:create:all                      # " "db:drop                            # Drops the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:drop:all to drop all databases in the config). Without RAILS_ENV or when RAILS_ENV is development, it defaults to dropping the development and test databases" "db:drop:_unsafe                    # " "db:drop:all                        # " "db:environment:set                 # Set the environment value for the database" "db:fixtures:identify               # " "db:fixtures:load                   # Loads fixtures into the current environment's database" "db:forward                         # " "db:load_config                     # " "db:migrate                         # Migrate the database (options: VERSION=x, VERBOSE=false, SCOPE=blog)" "db:migrate:down                    # " "db:migrate:redo                    # " "db:migrate:reset                   # " "db:migrate:status                  # Display status of migrations" "db:migrate:up                      # " "db:purge                           # " "db:purge:all                       # " "db:reset                           # " "db:rollback                        # Rolls the schema back to the previous version (specify steps w/ STEP=n)" "db:schema:cache:clear              # Clears a db/schema_cache.dump file" "db:schema:cache:dump               # Creates a db/schema_cache.dump file" "db:schema:dump                     # Creates a db/schema.rb file that is portable against any DB supported by Active Record" "db:schema:load                     # Loads a schema.rb file into the database" "db:schema:load_if_ruby             # " "db:seed                            # Loads the seed data from db/seeds.rb" "db:setup                           # Creates the database, loads the schema, and initializes with the seed data (use db:reset to also drop the database first)" "db:structure:dump                  # Dumps the database structure to db/structure.sql" "db:structure:load                  # Recreates the databases from the structure.sql file" "db:structure:load_if_sql           # " "db:test:clone                      # " "db:test:clone_schema               # " "db:test:clone_structure            # " "db:test:deprecated                 # " "db:test:load                       # " "db:test:load_schema                # " "db:test:load_structure             # " "db:test:prepare                    # " "db:test:purge                      # " "db:version                         # Retrieves the current schema version number" "debug:add_os_participants          # randomly add 25% of active artists to current open studios" "debug:average_aspect_ratio         # compute average aspect ratio" "debug:create_os_event              # create open studios event" "debug:test_json_endpoints          # test json endpoints" "default                            # " "dev:cache                          # Toggle development mode caching on/off" "environment                        # " "es:reindex                         # reindex models" "features                           # " "images:migrate_to_s3               # migrate images to s3" "initializers                       # Print out all defined initializers in the order they are invoked by Rails" "log:clear                          # Truncates all/specified *.log files in log/ to zero bytes (specify which logs with LOGS=test,development)" "mau:clean_names                    # cleanup names (remove leading/trailing whitespace" "mau:clean_suspended_artist_art     # clean art from suspended artists" "mau:daily_os_signup                # record todays OS count" "mau:images:build_cropped_thumbs    # build cropped thumbs - add force=true to force overwrites" "mau:images:build_large_image       # build large images" "mau:images:repair_filenames        # repair image filenames (make ..jpg into .jpg)" "mau:import_scammer_list            # import scammer emails from FASO" "mau:indy_studio_artist_cleanup     # clean up studio 0 artists" "mau:migrate_user_links             # migrate user/artist links" "mau:normalize_emails               # normalize emails - convert everyone to \"@example.com\"" "mau:populate_media                 # populate media" "mau:reset_passwords                # reset all passwords to \"whatever\"" "mau:show_social_link_type_counts   # show social link counts" "mau:slug_media                     # initiate studio slugs" "mau:slug_studios                   # initiate studio slugs" "mau:slug_users                     # initiate user slugs" "mau:tags:cleanup                   # remove duplicate tags" "mau:tags:downcase                  # downcase existing tags" "mau:tweetart                       # Send twitter updates about artists who've updated their art today" "middleware                         # Prints out your Rack middleware stack" "notes                              # Enumerate all annotations (use notes:optimize, :fixme, :todo for focus)" "notes:custom                       # Enumerate a custom annotation, specify with ANNOTATION=CUSTOM" "notes:fixme                        # " "notes:optimize                     # " "notes:todo                         # " "paperclip:clean                    # Cleans out invalid attachments" "paperclip:find_broken_attachments  # find missing attachments" "paperclip:refresh                  # Refreshes both metadata and thumbnails" "paperclip:refresh:metadata         # Regenerates content_type/size metadata for a given CLASS (and optional ATTACHMENT)" "paperclip:refresh:missing_styles   # Regenerates missing thumbnail styles for all classes using Paperclip" "paperclip:refresh:thumbnails       # Regenerates thumbnails for a given CLASS (and optional ATTACHMENT and STYLES splitted by comma)" "quality                            # Run cane to check quality metrics" "rails:template                     # " "rails:templates:copy               # " "rails:update                       # " "rails:update:bin                   # " "rails:update:configs               # " "railties:install:migrations        # " "restart                            # Restart app by touching tmp/restart.txt" "routes                             # Print out all defined routes in match order, with names" "rubocop                            # Run RuboCop" "rubocop:auto_correct               # Auto-correct RuboCop offenses" "sass:build                         # Forcefully updates the stylesheets generated by SASS" "sass:sass_environment              # " "sass:update                        # Updates the out of date stylesheets generated by SASS" "secret                             # Generate a cryptographically secure secret key (this is typically used to generate a secret for cookie sessions)" "simplecov                          # Run tests" "spec                               # Run all specs in spec directory (excluding plugin specs) / Runs all specs" "spec:all                           # Runs all rspec specs" "spec:controllers                   # Run the code examples in spec/controllers" "spec:enable_coverage               # " "spec:forms                         # Run the code examples in spec/forms" "spec:helpers                       # Run the code examples in spec/helpers" "spec:javascripts                   # Run all javascript specs" "spec:lib                           # Run the code examples in spec/lib" "spec:mailers                       # Run the code examples in spec/mailers" "spec:models                        # Run the code examples in spec/models" "spec:paginators                    # Run the code examples in spec/paginators" "spec:prepare                       # " "spec:presenters                    # Run the code examples in spec/presenters" "spec:routing                       # Run the code examples in spec/routing" "spec:serializers                   # Run the code examples in spec/serializers" "spec:services                      # Run the code examples in spec/services" "spec:statsetup                     # " "stats                              # Report code statistics (KLOCs, etc) from the application or engine" "stats:histogram:art_piece_title    # art piece titles" "teaspoon                           # Run the javascript specs" "teaspoon:info                      # Print teaspoon and framework information" "test                               # Runs all tests in test folder" "test:controllers                   # " "test:db                            # Run tests quickly, but also reset db" "test:functionals                   # " "test:generators                    # " "test:helpers                       # " "test:integration                   # " "test:jobs                          # " "test:mailers                       # " "test:models                        # " "test:prepare                       # " "test:run                           # " "test:units                         # " "time:zones[country_or_offset]      # List all time zones, list by two-letter country code (`rails time:zones[US]`), or list by UTC offset (`rails time:zones[-8]`)" "time:zones:all                     # " "time:zones:local                   # " "time:zones:us                      # " "tmp                                # " "tmp/cache                          # " "tmp/cache/assets                   # " "tmp/pids                           # " "tmp/sockets                        # " "tmp:cache:clear                    # " "tmp:clear                          # Clear cache and socket files from tmp/ (narrow w/ tmp:cache:clear, tmp:sockets:clear)" "tmp:create                         # Creates tmp directories for cache, sockets, and pids" "tmp:pids:clear                     # " "tmp:sockets:clear                  # ")))